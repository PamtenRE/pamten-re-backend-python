name: Sync Azure Credentials to Repos

on:
  pull_request:
    types: [closed]
    branches:
      - feature/*
      - develop
      - master
    paths:
      - 'repo-list.json'

permissions:
  contents: read
  actions: write
  pull-requests: write
  id-token: write

jobs:
  sync:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment: ${{ github.base_ref == 'master' && 'prod' || 'dev' }}

    env:
      ORG: PamtenRE
      GITHUB_TOKEN: ${{ secrets.REPO_ADMIN_TOKEN }}
      CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          pip install pynacl

      - name: Determine environment
        id: env_selector
        run: |
          if [[ "${GITHUB_BASE_REF}" == "master" ]]; then
            echo "env_name=prod" >> $GITHUB_OUTPUT
          else
            echo "env_name=dev" >> $GITHUB_OUTPUT
          fi
          echo "Selected environment: ${{ steps.env_selector.outputs.env_name }}"

      - name: Sync Azure secrets to each repo
        id: sync
        run: |
          ENV_NAME=${{ steps.env_selector.outputs.env_name }}
          echo "Syncing Azure secrets for environment: $ENV_NAME"
          REPOS=$(jq -r '.repos[]' repo-list.json)
          UPDATED_REPOS=()

          for repo in $REPOS; do
            echo "Updating $ENV_NAME environment secrets in $repo"

            key_response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/$ORG/$repo/environments/$ENV_NAME/secrets/public-key)

            key_id=$(echo "$key_response" | jq -r .key_id)
            public_key=$(echo "$key_response" | jq -r .key)

            if [ "$public_key" = "null" ] || [ -z "$public_key" ]; then
              echo "Environment '$ENV_NAME' not found in $repo â€” skipping..."
              continue
            fi

            for var in CLIENT_ID TENANT_ID SUBSCRIPTION_ID; do
              val=${!var}
              enc_val=$(python3 -c "import base64, nacl.encoding, nacl.public; \
                pk = nacl.public.PublicKey('$public_key', nacl.encoding.Base64Encoder()); \
                sealed_box = nacl.public.SealedBox(pk); \
                encrypted = sealed_box.encrypt(b'$val'); \
                print(base64.b64encode(encrypted).decode())")

              curl -s -X PUT \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                https://api.github.com/repos/$ORG/$repo/environments/$ENV_NAME/secrets/$var \
                -d "{\"encrypted_value\":\"$enc_val\",\"key_id\":\"$key_id\"}" > /dev/null
            done

            echo "Secrets updated for $repo"
            UPDATED_REPOS+=("$repo")
          done

          echo "repos_updated=${UPDATED_REPOS[*]}" >> $GITHUB_OUTPUT

      - name: Comment on PR with summary
        if: always()
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          ENV_NAME=${{ steps.env_selector.outputs.env_name }}
          REPOS="${{ steps.sync.outputs.repos_updated }}"

          if [ -z "$REPOS" ]; then
            COMMENT="No repositories were updated. Please check if environments (dev/prod) exist in each repo."
          else
            COMMENT="**Azure secrets have been synced** for the following repositories under **${ENV_NAME}** environment:\n\n"
            for repo in $REPOS; do
              COMMENT+="- \`${repo}\`\n"
            done
          fi

          echo "Posting comment to PR #$PR_NUMBER..."
          curl -s -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"$COMMENT\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments"